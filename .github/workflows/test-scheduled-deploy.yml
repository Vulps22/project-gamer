# .github/workflows/test-scheduled-deploy.yml

name: Test Scheduled Deployment

on:
  # Only manual trigger for testing
  workflow_dispatch:
    inputs:
      simulate_week:
        description: 'Simulate which week (2 or 4)'
        required: true
        default: '2'
        type: choice
        options:
        - '2'
        - '4'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Run Tests
        run: npm test

  simulate-release:
    name: Simulate Release Creation (DRY RUN)
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read # Need to read PRs for changelog
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Simulate Release Tag Calculation
        id: release_tag
        run: |
          # Get current date components
          YEAR=$(date +%Y)
          MONTH=$(date +%m)
          
          # Use the simulated week from input
          SIMULATED_WEEK="${{ github.event.inputs.simulate_week }}"
          
          if [ "$SIMULATED_WEEK" = "2" ]; then
            RELEASE_NUM=1
            echo "Simulating 2nd Saturday deployment"
          elif [ "$SIMULATED_WEEK" = "4" ]; then
            RELEASE_NUM=2
            echo "Simulating 4th Saturday deployment"
          else
            echo "Error: Invalid week simulation"
            exit 1
          fi
          
          # Create release tag (but don't actually create it)
          RELEASE_TAG="TEST-v${YEAR}.${MONTH}.R${RELEASE_NUM}"
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "Would create release tag: ${RELEASE_TAG}"
          
      - name: Simulate Tag Check
        run: |
          TAG="${{ steps.release_tag.outputs.RELEASE_TAG }}"
          echo "Checking if tag would already exist: $TAG"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "⚠️  Tag $TAG already exists. Would skip deployment."
          else
            echo "✅ Tag $TAG does not exist. Would proceed with deployment."
          fi
          
      - name: Test Enhanced Changelog Generation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📝 Testing actual enhanced changelog generation..."
          
          # Get the most recent actual release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found. Using initial commit."
            LAST_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "Last release tag: ${LAST_TAG}"
          echo "Current HEAD: $(git rev-parse HEAD)"
          
          # Test the actual changelog generation logic
          echo ""
          echo "📋 Generating REAL changelog using actual logic:"
          echo "## What's Changed"
          echo ""
          
          # Get merge commits since last tag (same logic as actual workflow)
          if [ "$LAST_TAG" != "" ]; then
            MERGE_COMMITS=$(git log --merges --pretty=format:"%H|%s" ${LAST_TAG}..HEAD)
          else
            MERGE_COMMITS=$(git log --merges --pretty=format:"%H|%s")
          fi
          
          if [ -z "$MERGE_COMMITS" ]; then
            echo "No merge commits found since last release."
            echo ""
            echo "Regular commits since last release:"
            if [ "$LAST_TAG" != "" ]; then
              git log --no-merges --pretty=format:"• %s by @%an" ${LAST_TAG}..HEAD | head -10
            else
              git log --no-merges --pretty=format:"• %s by @%an" | head -10
            fi
          else
            echo "Found merge commits, processing PRs..."
            
            # Process each merge commit, but only GitHub PR merges
            echo "$MERGE_COMMITS" | while IFS='|' read -r commit COMMIT_MSG; do
              # Only process GitHub PR merge commits (not manual merges)
              if [[ $COMMIT_MSG =~ ^Merge\ pull\ request\ \#([0-9]+)\ from ]]; then
                PR_NUM=${BASH_REMATCH[1]}
                echo "Processing PR #${PR_NUM}..."
                
                # Get PR details using GitHub CLI
                if command -v gh &> /dev/null; then
                  PR_DATA=$(gh pr view $PR_NUM --json title,author,body 2>/dev/null || echo "")
                  if [ -n "$PR_DATA" ]; then
                    PR_TITLE=$(echo "$PR_DATA" | jq -r '.title // "Unknown Title"')
                    PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login // "Unknown Author"')
                    
                    # Extract issue number from branch name in the merge commit message
                    # Format: "Merge pull request #123 from user/40-branch-name"
                    LINKED_ISSUE=""
                    if [[ $COMMIT_MSG =~ from\ [^/]+/([0-9]+)- ]]; then
                      LINKED_ISSUE=${BASH_REMATCH[1]}
                      echo "• $PR_TITLE by @$PR_AUTHOR for #$LINKED_ISSUE"
                    else
                      echo "• $PR_TITLE by @$PR_AUTHOR in #$PR_NUM"
                    fi
                  else
                    echo "• Failed to get PR #${PR_NUM} details"
                  fi
                else
                  echo "• $COMMIT_MSG (GitHub CLI not available)"
                fi
              else
                # Skip non-PR merges (like "Merge branch 'main'")
                echo "Skipping non-PR merge: $COMMIT_MSG"
              fi
            done
          fi
          
          echo ""
          
          TEST_TAG="${{ steps.release_tag.outputs.RELEASE_TAG }}"
          echo ""
          echo "**Full Changelog**: https://github.com/Vulps22/project-gamer/compare/${LAST_TAG}...${TEST_TAG}"
          
          echo ""
          echo "✅ Changelog generation test completed!"
          echo "This shows the actual output that would be generated."
          
      - name: Simulate Deployment Trigger
        run: |
          TAG="${{ steps.release_tag.outputs.RELEASE_TAG }}"
          echo "🚀 In real deployment, would:"
          echo "1. Create and push tag: $TAG"
          echo "2. Create GitHub release with generated changelog"
          echo "3. Trigger deploy.yml workflow via tag push"
          echo "4. Monitor deployment completion"
          echo ""
          echo "✅ Test completed successfully!"
          echo "Ready for real deployment when scheduled workflow runs."
